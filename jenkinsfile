pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            app: jenkins-agent
        spec:
          containers:
          - name: jnlp
            image: jenkins/inbound-agent:3307.v632ed11b_3a_c7-2
          - name: python
            image: python:3.9-slim
            command: ["sleep", "infinity"]
            tty: true
          - name: docker
            image: docker:24.0-cli
            command: ["sleep", "infinity"]
            tty: true
            volumeMounts:
              - name: docker-sock
                mountPath: /var/run/docker.sock
          volumes:
            - name: docker-sock
              hostPath:
                path: /var/run/docker.sock
        '''
    }
  }
  environment {
    DOCKER_REGISTRY = 'docker.io'
    DOCKER_IMAGE = 'flask_hello'
    KUBE_NAMESPACE = 'jenkins'
  }
  stages {
    stage('Checkout Code') {
      steps {
        container('jnlp') {
          checkout scm
        }
      }
    }
    
    stage('Install Dependencies') {
      steps {
        container('python') {
          sh 'pip install -r requirements.txt'
        }
      }
    }

    stage('Run Tests') {
      steps {
        container('python') {
          sh 'python test.py --verbose'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        container('docker') {
          script {
            withCredentials([usernamePassword(
              credentialsId: 'docker-creds',
              usernameVariable: 'DOCKER_USER',
              passwordVariable: 'DOCKER_PASS'
            )]) {
              sh """
                docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_REGISTRY
                docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE:${env.BUILD_NUMBER} .
                docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:${env.BUILD_NUMBER}
              """
            }
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        container('docker') {
          script {
            withCredentials([kubeconfigFile(
              credentialsId: 'kubeconfig-cred',
              variable: 'KUBECONFIG'
            )]) {
              sh """
                kubectl set image deployment/flask-app \
                  flask-app=$DOCKER_REGISTRY/$DOCKER_IMAGE:${env.BUILD_NUMBER} \
                  --namespace $KUBE_NAMESPACE
              """
            }
          }
        }
      }
    }
  }
  post {
    always {
      container('jnlp') {
        cleanWs()
      }
    }
  }
}